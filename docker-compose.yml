services:
  frontend_api:
    container_name: frontend-api
    image: frontend-api
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3009:3009"
    environment:
      - CONVERTER_API=http://converter:5000
      - TTS_SERVER_API=http://tts_server:4001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - app_network
    depends_on:
      tts_server:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:3009 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  converter:
    container_name: converter
    image: converter
    build:
      context: ./converter
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - converter_uploads:/app/uploads
      - converter_outputs:/app/outputs
    networks:
      - app_network
    healthcheck:
      test: curl --fail http://localhost:5000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  tts_server:
    container_name: tts_server
    image: tts_server
    build:
      context: ./tts_server/TTS
      dockerfile: Dockerfile
    environment:
      - COQUI_TOS_AGREED=1
      - USE_CPU=0  # Set to 1 if no GPU is available
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "4001:4001"
    runtime: nvidia  # Enables GPU support with NVIDIA runtime
    restart: always
    volumes:
      - tts_server_models:/app/tts_models
      - /root/.local/share/tts:/root/.local/share/tts  # Persist downloaded models
    networks:
      - app_network
    healthcheck:
      test: curl --fail http://localhost:4001/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
#      start_period: 60s  # Allow time for model loading
    deploy:
      resources:
        limits:
          memory: 4g
          cpus: "2.0"

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  tts_server_models:
    driver: local
  tts_logs:
    driver: local
  tts_outputs:
    driver: local
  converter_uploads:
    driver: local
  converter_outputs:
    driver: local

networks:
  app_network:
    driver: bridge
